/* tslint:disable */
/* eslint-disable */
/**
 * free-ran-ue Console API
 * API documentation for free-ran-ue Console
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiConsoleLoginPost200Response
 */
export interface ApiConsoleLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost200Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost200Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ApiConsoleLoginPost400Response
 */
export interface ApiConsoleLoginPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost400Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost400Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ApiConsoleLoginPost401Response
 */
export interface ApiConsoleLoginPost401Response {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost401Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost401Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ApiConsoleLoginPost500Response
 */
export interface ApiConsoleLoginPost500Response {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost500Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPost500Response
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface ApiConsoleLoginPostRequest
 */
export interface ApiConsoleLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiConsoleLogoutDelete200Response
 */
export interface ApiConsoleLogoutDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiConsoleLogoutDelete200Response
     */
    'message'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticate user and return JWT token
         * @summary User Login
         * @param {ApiConsoleLoginPostRequest} apiConsoleLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleLoginPost: async (apiConsoleLoginPostRequest: ApiConsoleLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiConsoleLoginPostRequest' is not null or undefined
            assertParamExists('apiConsoleLoginPost', 'apiConsoleLoginPostRequest', apiConsoleLoginPostRequest)
            const localVarPath = `/api/console/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiConsoleLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout current user
         * @summary User Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleLogoutDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/console/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Authenticate user and return JWT token
         * @summary User Login
         * @param {ApiConsoleLoginPostRequest} apiConsoleLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleLoginPost(apiConsoleLoginPostRequest: ApiConsoleLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiConsoleLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsoleLoginPost(apiConsoleLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiConsoleLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logout current user
         * @summary User Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiConsoleLogoutDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiConsoleLogoutDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiConsoleLogoutDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.apiConsoleLogoutDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Authenticate user and return JWT token
         * @summary User Login
         * @param {ApiConsoleLoginPostRequest} apiConsoleLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleLoginPost(apiConsoleLoginPostRequest: ApiConsoleLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiConsoleLoginPost200Response> {
            return localVarFp.apiConsoleLoginPost(apiConsoleLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout current user
         * @summary User Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiConsoleLogoutDelete(options?: RawAxiosRequestConfig): AxiosPromise<ApiConsoleLogoutDelete200Response> {
            return localVarFp.apiConsoleLogoutDelete(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Authenticate user and return JWT token
     * @summary User Login
     * @param {ApiConsoleLoginPostRequest} apiConsoleLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiConsoleLoginPost(apiConsoleLoginPostRequest: ApiConsoleLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiConsoleLoginPost(apiConsoleLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout current user
     * @summary User Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiConsoleLogoutDelete(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).apiConsoleLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }
}



